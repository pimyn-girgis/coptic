#!/bin/bash

# NOTE: These GitHub helpers work, but also consider using the `gh` CLI. See
# https://cli.github.com/.
GITHUB="https://github.com/pishoyg/coptic"
# crum opens a Crum page on ⲙⲉⲧⲣⲉⲙⲛ̀Ⲭⲏⲙⲓ.
crum () {
  for KEY in "${@}"; do
    open "https://metremnqymi.com/crum/${KEY}.html"
  done
}

# issues open issue pages in GitHub.
issues () {
  for ISSUE in "${@}"; do
    open "${GITHUB}/issues/${ISSUE}"
  done
}

# github opens the GitHub page for the project.
github () {
  open "${GITHUB}"
}

# commits opens the commits in GitHub.
commits () {
  for ISSUE in "${@}"; do
    open "${GITHUB}/commit/$(git rev-parse "${ISSUE}")"
  done
}

# Print the Makefile recipe without executing it.
alias makedr='make --dry-run'

# Colors are used to prettify outputs.
export RESET='\033[0m'
export BLACK='\033[0;30m'
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[0;37m'

color () {
  echo -e "${!1}${*:2}${RESET}"
}

# _grep runs `grep` but changes the exit code 1 to 0.
# `grep` returns an exit code of 0 if matches are found, 1 if NO matches are
# found, or something else if it runs into an error.
# _grep is essentially a version of `grep` that considers the absence of a
# match to be a success.
_grep() {
  grep "${@}"
  RES=$?
  if [[ "${RES}" == "1" || "${RES}" == "0" ]]; then
    return 0
  fi
  return "${RES}"
}

# Find, excluding "garbage" files and directories.
findex () {
  find "${1}" \
    -not -path "./.git/*" \
    -not -path "./.git" \
    -not -name ".DS_Store" \
    -not -path "*/__pycache__/*" \
    -not -path "*/__pycache__" \
    -not -path "./coptic.egg-info/*" \
    -not -path "./coptic.egg-info" \
    -not -path "./.mypy_cache/*" \
    -not -path "./.mypy_cache" \
    -not -path "./.ruff_cache/*" \
    -not -path "./.ruff_cache" \
    -not -path "./node_modules/*" \
    -not -path "./node_modules" \
    -not -path "bible/stshenouda.org/data/output/epub/*" \
    -not -path "bible/stshenouda.org/data/output/epub" \
    -not -name "package-lock.json" \
    -not -name "package.json" \
    -not -name "flashcards/data/output/anki/coptic.apkg" \
    -not -name ".env" \
    -not -path "./archive/*" \
    -not -path "./archive" \
    "${@:2}"
}

# Find, excluding "garbage", and data!
findexx () {
  findex "${1}" \
    -not -path "*/data/*" \
    "${@:2}"
}

# Find files, excluding "garbage".
ffindex () {
  findex "${1}" -type f "${@:2}"
}

# Find files, excluding "garbage", and data.
ffindexx () {
  findexx "${1}" -type f "${@:2}"
}

# Grep, excluding "garbage" and binary files.
grepex () {
  ffindex "${1}" -exec grep "${@:2}" --binary-files="without-match" --color=auto --with-filename --line-number {} \;
}

# Grep, excluding "garbage", binary files, and data.
grepexx () {
  ffindexx "${1}" -exec grep "${@:2}" --binary-files="without-match" --color=auto --with-filename --line-number {} \;
}

# Search for TODO's.
# NOTE: We "mangle" the regex using extra parentheses in order to prevent it
# from matching itself.
todo() {
  HELP="${BLUE}Display TODO markers in the repo.
  Run ${GREEN}todo \"\${ISSUE_NUMBER}\" ${BLUE}to show TODOs for a specific issue.
  Run ${GREEN}todo \"stray\" ${BLUE}to show TODOs without an associated issue.
  Run ${GREEN}todo --help ${BLUE}to display this message.${RESET}"
  PATTERN='TODO(:) '
  PARAM="${1}"
  if (( "$#" > 1 )); then
    echo -e "${RED}Too many parameters!${RESET}"
    echo -e "${HELP}"
    return 1
  fi
  if [[ "${PARAM}" == "--help" ]]; then
    echo -e "${HELP}"
    return 0
  fi
  # TODO: (#66) There will be no need to support stray TODO's once they have
  # been eradicated and banned.
  if [[ "${PARAM}" == "stray" ]]; then
    # Search for TODO's without an assigned issue.
    PATTERN="${PATTERN}(?!\(#[0-9]+\))"
  elif [ -n "${PARAM}" ]; then
    if ! echo "${PARAM}" | grep --quiet --extended-regexp '^[0-9]+$'; then
      echo -e "${RED}Invalid parameter.${RESET}"
      echo -e "${HELP}"
      return 1
    fi
    PATTERN="${PATTERN}\(#${PARAM}\)"
    CLOSED=$(gh issue view "${PARAM}" --json "closed" --jq ".closed")
    if [[ "${CLOSED}" == "true" ]]; then
      echo -e "${RED}Warning: Issue ${YELLOW}#${PARAM} ${RED}is closed!"\
        "See ${YELLOW}https://github.com/pishoyg/coptic/issues/${PARAM}${RED}.${RESET}"
    fi
  fi
  grepexx . --perl-regexp "${PATTERN}"
}

# Search for dead Python code, or `dead` disable markers.
pydead () {
  dead --exclude=archive | while read -r MATCH; do
    SYMBOL="$(echo "${MATCH}" | awk '{ print $1 }')"
    MESSAGE="$(echo "${MATCH}" | awk '{ $1=""; $NF=""; print }')"
    FILE="$(echo "${MATCH}" | awk '{ print $NF }' | cut --field=1 --delimiter=":")"
    LINE_NUM="$(echo "${MATCH}" | awk '{ print $NF }' | cut --field=2 --delimiter=":")"
    echo -e "${RED}${SYMBOL}${RESET}${MESSAGE}${PURPLE}${FILE}${RESET}:${GREEN}${LINE_NUM}${RESET}"
  done
  grepexx . '# dead: disable' --include="*.py"
}
