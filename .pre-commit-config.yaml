---
# See https://pre-commit.com for more information
# NOTE: Given fail_fast, you should the more problematic hooks first.
# See https://github.com/pishoyg/coptic/issues/94.
# NOTE: Fail fast won't be optimal if your pipelines get better at writing
# consistent output that doesn't get modified by the pre-commits. Revisit.
fail_fast: true
exclude: ^archive/
repos:
  # Language-agnostic
  - repo: meta
    hooks:
      - id: check-useless-excludes
      - id: identity
  - repo: local
    hooks:
      - id: commit-file-sizes
        name: commit-file-sizes
        # NOTE: Running the script with `errexit` is problematic, although it
        # is not understood why.
        entry: |
          bash -c '
          set -o nounset  # Consider an undefined variable to be an error.
          announce () {
            echo -e "${1}Files in this batch total ${2}${SIZE}${1}.${RESET}"
          }
          if (( "$#" == 0 )); then
            exit
          fi
          SIZE="$(du --apparent-size --human-readable --summarize --total "${@}" | tail -n 1 | cut --fields 1)"
          MAGNITUDE="$(echo ${SIZE} | grep -o [A-Z])"
          COUNT="$(echo ${SIZE} | grep --only --extended-regexp "^[0-9]+")"
          if [[ "${MAGNITUDE}" == "" || "${MAGNITUDE}" == "K" ]]; then
            announce "${BLUE}" "${GREEN}"
          elif [[ "${MAGNITUDE}" == "M" ]] && (( COUNT < 128 )); then
            announce "${YELLOW}" "${CYAN}"
          else
            announce "${RED}" "${PURPLE}"
            exit 1
          fi
          ' --
        language: system
        verbose: true
        require_serial: true
      - id: check-todo
        name: check-todo
        # TODO: (#66) Once all existing TODO's have been assigned issues,
        # change the following to an error rather than simply a warning.
        # NOTE: Running the script with `errexit` is problematic, although it
        # is not understood why.
        entry: |
          bash -c '
          set -o nounset  # Consider an undefined variable to be an error.
          if (( "$#" == 0 )); then
            exit
          fi
          TODO="$(grep "TODO(:) (?!\(#[0-9]+\))" --perl-regexp \
            --ignore-case --color=auto "${@}")"
          if [ -n "${TODO}" ]; then
            echo -e "${RED} Stray TODO markers found. Please add an issue"\
              "number to each TODO:\n${YELLOW}${TODO}${RED}.${RESET}"
          fi' --
        language: system
        verbose: true
        require_serial: true
  # TypeScript and JavaScript
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v9.9.0
    hooks:
      - id: eslint
        additional_dependencies:
          - typescript
          - globals
          - typescript-eslint
          - "@stylistic/eslint-plugin"
          - "eslint-config-standard@latest"
        args: [--fix]
        files: \.(js|jsx|mjs|cjs|ts|tsx|mts|cts)$
        types: [file]
  # NOTE:The non-legacy version of `fixmyjs` is rumored to be problematic. See
  # https://github.com/pre-commit/mirrors-fixmyjs?tab=readme-ov-file#using-fixmyjs-with-pre-commit.
  # Consider running with `--legacy` (or `-l`) if you run into any issues.
  - repo: https://github.com/pre-commit/mirrors-fixmyjs
    rev: v2.0.0
    hooks:
      - id: fixmyjs
        args: [-c, .jshintrc]
  - repo: https://github.com/pre-commit/mirrors-jshint
    rev: v2.13.6
    hooks:
      - id: jshint
  # CSS
  - repo: https://github.com/pre-commit/mirrors-csslint
    rev: v1.0.5
    hooks:
      - id: csslint
  - repo: local
    hooks:
      # Python Unit Tests Exist
      - id: python-unittest-exists
        name: python-unittest-exists
        entry: |
          bash -c '
          set -o errexit  # Exit upon encountering a failure.
          set -o nounset  # Consider an undefined variable to be an error.
          if (( "$#" == 0 )); then
            exit
          fi
          for FILE in "$@"; do
            DIRNAME="$(dirname "${FILE}")"
            if [[ "$(basename "${DIRNAME}")" != "test" ]]; then
              TEST="${DIRNAME}/test/test_$(basename "${FILE}")"
              if [ ! -f "${TEST}" ]; then
                echo -e "${RED}Please create a unit test in"\
                  "${YELLOW}${TEST}${RED} and import"\
                  "${YELLOW}${FILE}${RED}.${RESET}"
                exit 1
              fi
            else
              INIT="${DIRNAME}/__init__.py"
              if [ ! -f "${INIT}" ]; then
                echo -e "${RED}You forgot ${YELLOW}${INIT}${RED}.${RESET}"
                exit 1
              fi
            fi
          done' --
        language: system
        types: [python]
        verbose: true
        exclude: setup.py
      # HTML
      - id: tidy-html
        name: tidy-html
        entry: tidy -indent -modify -quiet --tidy-mark no -wrap 80
        language: system
        files: .*\.html
      # XML
      - id: tidy-xml
        name: tidy-xml
        entry: tidy -indent -modify -quiet --tidy-mark no -wrap 80 -xml
        language: system
        files: .*\.(xml|xhtml|opf)$
      # JSON
      - id: json-tool
        name: json-tool
        entry: |
          bash -c '
          set -o errexit  # Exit upon encountering a failure.
          set -o nounset  # Consider an undefined variable to be an error.
          if (( "$#" == 0 )); then
            exit
          fi
          for FILE in "$@"; do
            python -m json.tool --no-ensure-ascii --indent 2 \
              "${FILE}" "${FILE}";
          done' --
        language: system
        files: (.jshintrc|.csslintrc|\.jsonc?)$
        types: [file]
        exclude: tsconfig\.json$
  # Python
  # TODO: (#213) Add more Python hooks from https://pre-commit.com/hooks.html.
  - repo: https://github.com/psf/black-pre-commit-mirror
    rev: 24.4.2
    hooks:
      - id: black
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (python)
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
      - id: python-check-blanket-type-ignore
      - id: python-check-mock-methods
      - id: python-no-eval
      - id: python-use-type-annotations
      - id: rst-backticks
      - id: rst-directive-colons
      - id: rst-inline-touching-normal
      - id: text-unicode-replacement-char
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.1
    hooks:
      - id: mypy
        args: [--strict]
        # NOTE: This list should, ideally, remain in sync with your
        # requirements.txt (which, of course, in turn, should remain in sync
        # with your repo).
        additional_dependencies: [bs4, clipboard, colorama, EbookLib, genanki,
          gspread, json5, markdown, oauth2client, openpyxl, pandas, pathlib,
          Pillow, pip-review, pre-commit, setuptools, type_enforced, typing,
          urllib3]
        # TODO: (#215) `mypy` will require significant refactoring. Perform it,
        # and enable the hook.
        exclude: .*
  # Language-agnostic
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: end-of-file-fixer
      - id: check-added-large-files
        exclude: .*\.(html|xhtml|mobi|pdf|tsv|jpg|png|json)$|.*/img/.*
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-merge-conflict
      - id: check-shebang-scripts-are-executable
      - id: check-symlinks
      - id: check-vcs-permalinks
      - id: check-yaml
      - id: check-toml
      - id: debug-statements
      - id: destroyed-symlinks
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: name-tests-test
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: forbid-submodules
      - id: mixed-line-ending
      - id: trailing-whitespace
        exclude: .*\.(tsv|csv|xml|html|xhtml)$
      - id: check-xml
  - repo: https://github.com/mxr/sync-pre-commit-deps
    rev: v0.0.1
    hooks:
      - id: sync-pre-commit-deps
  # Spell Checking
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.4
    hooks:
      - id: codespell
        # The KELLIA driver contains non-English text.
        # Other types of files are data files, not code files. We don't take
        # data updates lightly.
        exclude: ".*\\.(xml|html|xhtml|txt|tsv|csv|json|tab|msql|xsd)$|dictionary/kellia.uni-goettingen.de/main.py"
  # NOTE: This hook was problematic in the past. It was found to change code
  # variable names, assuming that they are typos!
  # We pass `--diff` to make it report typos before fixing them.
  # Keep an eye for it.
  - repo: https://github.com/crate-ci/typos
    rev: v1.24.1
    hooks:
      - id: typos
        exclude: ".*\\.(xml|html|xhtml|txt|tsv|csv|json|tab|msql|xsd)$|dictionary/kellia.uni-goettingen.de/main.py"
        args: [--diff]
  # Git Commit Messages
  - repo: https://github.com/jorisroovers/gitlint
    rev: v0.19.1
    hooks:
      - id: gitlint
  # Security
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.16.1
    hooks:
      - id: gitleaks
  - repo: https://github.com/trufflesecurity/truffleHog
    rev: v3.81.9
    hooks:
      - id: trufflehog
  - repo: https://github.com/thoughtworks/talisman
    rev: v1.32.0
    hooks:
      - id: talisman-commit
        entry: cmd --githook pre-commit
  # Shell
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
  - repo: https://github.com/openstack/bashate
    rev: 2.1.1
    hooks:
      - id: bashate
        args: [-i, E003]
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.8.0-1
    hooks:
      - id: shfmt
        args: [-indent, '2']
  # Markdown
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint-fix
        args: [--disable, MD033, MD036]
  - repo: https://github.com/thlorenz/doctoc
    rev: v2.2.0
    hooks:
      - id: doctoc
  # YAML
  - repo: https://github.com/google/yamlfmt
    rev: v0.13.0
    hooks:
      - id: yamlfmt
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: [--strict]
  # Protobuf
  - repo: https://github.com/bufbuild/buf
    rev: v1.34.0
    hooks:
      - id: buf-dep-prune
      - id: buf-dep-update
      - id: buf-format
      - id: buf-lint
      - id: buf-breaking
      - id: buf-generate
  # Lua
  - repo: https://github.com/JohnnyMorganz/StyLua
    rev: v0.20.0
    hooks:
      - id: stylua
  # Makefile
  - repo: https://github.com/mrtazz/checkmake
    rev: 0.2.2
    hooks:
      - id: checkmake
  - repo: local
    hooks:
      # Crum Images
      - id: crum-img-validate
        name: crum-img-validate
        entry: python dictionary/marcion.sourceforge.net/img_helper.py --validate
        language: system
        # NOTE: This hook should also run when files are deleted. But
        # pre-commits don't work that way! If a file is deleted, even if it
        # matches the pattern below, the hook won't be triggered.
        # We still use the pattern to run the hook selectively because it's
        # too slow. For deletions, we rely on the developer's memory, as well
        # as sporadic runs of the scripts triggered by other operations such as
        # image modifications and additions, to ensure that the files that need
        # to be deleted are deleted.
        files: ^dictionary/marcion.sourceforge.net/data/img.*
        pass_filenames: false
      # Daily Statistics
      - id: stats
        name: stats
        entry: |
          bash -c '
          set -o errexit  # Exit upon encountering a failure.
          set -o nounset  # Consider an undefined variable to be an error.
          if ((
            $(date +%s) - $(tail -n 1 data/stats.tsv | cut --fields 2) >= 86400
          )); then
            echo -e "${RED}Run ${YELLOW}\`make stats\`${RED}.${RESET}"
            exit 1;
          fi'
        language: system
        pass_filenames: false
      # Python Unit Tests
      - id: python-unittest
        name: python-unittest
        entry: |
          bash -c '
          set -o errexit  # Exit upon encountering a failure.
          set -o nounset  # Consider an undefined variable to be an error.
          if (( "$#" == 0 )); then
            exit
          fi
          for DIR in $(dirname "$@" | grep --invert "/test$" | sort | uniq); do
            python -m unittest discover "${DIR}";
          done' --
        language: system
        types: [python]
        verbose: true
      # DO-NOT-SUBMIT
      - id: check-do-not-submit
        name: check-do-not-submit
        # NOTE: Running the script with `errexit` is problematic, although it
        # is not understood why.
        # NOTE: We mangle the regex using extra parentheses to prevent it from
        # matching itself.
        entry: |
          bash -c '
          set -o nounset  # Consider an undefined variable to be an error.
          if (( "$#" == 0 )); then
            exit
          fi
          DO_NOT_SUBMIT="$(grep "(DO) (NOT) (SUBMIT|COMMIT)" --extended-regexp \
            --files-with-matches --ignore-case "${@}")"
          if [ -n "${DO_NOT_SUBMIT}" ]; then
            echo -e "${RED} DO-NOT-SUBMIT markers found in"\
              "${YELLOW}${DO_NOT_SUBMIT}${RED}.${RESET}"
            exit 1
          fi' --
        language: system
      # One README
      - id: check-one-readme
        name: check-one-readme
        entry: |
          bash -c '
          set -o errexit  # Exit upon encountering a failure.
          set -o nounset  # Consider an undefined variable to be an error.
          if (( "$#" == 0 )); then
            exit
          fi
          for FILE in "${@}"; do
            BASENAME="$(basename "${FILE}")"
            if [[ "${BASENAME}" == "README.md" ]]; then
              echo -e "${PURPLE}Only the README.md at the root is allowed."\
                "Please delete ${RED}${FILE}${PURPLE}.${RESET}"
              exit 1
            fi
          done'
        language: system
        exclude: ^README.md$
