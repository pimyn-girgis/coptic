/*  Marcion
    Copyright (C) 2009-2016 Milan Konvicka

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */

#include "ctranslit.h"
//

QChar all_ggl[]={
0x0386, //GREEK CAPITAL LETTER ALPHA WITH TONOS
0x0388, //GREEK CAPITAL LETTER EPSILON WITH TONOS
0x0389, //GREEK CAPITAL LETTER ETA WITH TONOS
0x038A, //GREEK CAPITAL LETTER IOTA WITH TONOS
0x038C, //GREEK CAPITAL LETTER OMICRON WITH TONOS
0x038E, //GREEK CAPITAL LETTER UPSILON WITH TONOS
0x038F, //GREEK CAPITAL LETTER OMEGA WITH TONOS
0x0390, //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
0x0391, //GREEK CAPITAL LETTER ALPHA
0x0392, //GREEK CAPITAL LETTER BETA
0x0393, //GREEK CAPITAL LETTER GAMMA
0x0394, //GREEK CAPITAL LETTER DELTA
0x0395, //GREEK CAPITAL LETTER EPSILON
0x0396, //GREEK CAPITAL LETTER ZETA
0x0397, //GREEK CAPITAL LETTER ETA
0x0398, //GREEK CAPITAL LETTER THETA
0x0399, //GREEK CAPITAL LETTER IOTA
0x039A, //GREEK CAPITAL LETTER KAPPA
0x039B, //GREEK CAPITAL LETTER LAMDA
0x039C, //GREEK CAPITAL LETTER MU
0x039D, //GREEK CAPITAL LETTER NU
0x039E, //GREEK CAPITAL LETTER XI
0x039F, //GREEK CAPITAL LETTER OMICRON
0x03A0, //GREEK CAPITAL LETTER PI
0x03A1, //GREEK CAPITAL LETTER RHO
0x03A3, //GREEK CAPITAL LETTER SIGMA
0x03A4, //GREEK CAPITAL LETTER TAU
0x03A5, //GREEK CAPITAL LETTER UPSILON
0x03A6, //GREEK CAPITAL LETTER PHI
0x03A7, //GREEK CAPITAL LETTER CHI
0x03A8, //GREEK CAPITAL LETTER PSI
0x03A9, //GREEK CAPITAL LETTER OMEGA
0x03AA, //GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
0x03AB, //GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
0x03AC, //GREEK SMALL LETTER ALPHA WITH TONOS
0x03AD, //GREEK SMALL LETTER EPSILON WITH TONOS
0x03AE, //GREEK SMALL LETTER ETA WITH TONOS
0x03AF, //GREEK SMALL LETTER IOTA WITH TONOS
0x03B0, //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
0x03B1, //GREEK SMALL LETTER ALPHA
0x03B2, //GREEK SMALL LETTER BETA
0x03B3, //GREEK SMALL LETTER GAMMA
0x03B4, //GREEK SMALL LETTER DELTA
0x03B5, //GREEK SMALL LETTER EPSILON
0x03B6, //GREEK SMALL LETTER ZETA
0x03B7, //GREEK SMALL LETTER ETA
0x03B8, //GREEK SMALL LETTER THETA
0x03B9, //GREEK SMALL LETTER IOTA
0x03BA, //GREEK SMALL LETTER KAPPA
0x03BB, //GREEK SMALL LETTER LAMDA
0x03BC, //GREEK SMALL LETTER MU
0x03BD, //GREEK SMALL LETTER NU
0x03BE, //GREEK SMALL LETTER XI
0x03BF, //GREEK SMALL LETTER OMICRON
0x03C0, //GREEK SMALL LETTER PI
0x03C1, //GREEK SMALL LETTER RHO
0x03C2, //GREEK SMALL LETTER FINAL SIGMA
0x03C3, //GREEK SMALL LETTER SIGMA
0x03C4, //GREEK SMALL LETTER TAU
0x03C5, //GREEK SMALL LETTER UPSILON
0x03C6, //GREEK SMALL LETTER PHI
0x03C7, //GREEK SMALL LETTER CHI
0x03C8, //GREEK SMALL LETTER PSI
0x03C9, //GREEK SMALL LETTER OMEGA
0x03CA, //GREEK SMALL LETTER IOTA WITH DIALYTIKA
0x03CB, //GREEK SMALL LETTER UPSILON WITH DIALYTIKA
0x03CC, //GREEK SMALL LETTER OMICRON WITH TONOS
0x03CD, //GREEK SMALL LETTER UPSILON WITH TONOS
0x03CE, //GREEK SMALL LETTER OMEGA WITH TONOS
0x1F00, //GREEK SMALL LETTER ALPHA WITH PSILI
0x1F01, //GREEK SMALL LETTER ALPHA WITH DASIA
0x1F02, //GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA
0x1F03, //GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA
0x1F04, //GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA
0x1F05, //GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA
0x1F06, //GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI
0x1F07, //GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI
0x1F08, //GREEK CAPITAL LETTER ALPHA WITH PSILI
0x1F09, //GREEK CAPITAL LETTER ALPHA WITH DASIA
0x1F0A, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA
0x1F0B, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA
0x1F0C, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA
0x1F0D, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA
0x1F0E, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI
0x1F0F, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI
0x1F10, //GREEK SMALL LETTER EPSILON WITH PSILI
0x1F11, //GREEK SMALL LETTER EPSILON WITH DASIA
0x1F12, //GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA
0x1F13, //GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA
0x1F14, //GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA
0x1F15, //GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA
0x1F18, //GREEK CAPITAL LETTER EPSILON WITH PSILI
0x1F19, //GREEK CAPITAL LETTER EPSILON WITH DASIA
0x1F1A, //GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA
0x1F1B, //GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA
0x1F1C, //GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA
0x1F1D, //GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA
0x1F20, //GREEK SMALL LETTER ETA WITH PSILI
0x1F21, //GREEK SMALL LETTER ETA WITH DASIA
0x1F22, //GREEK SMALL LETTER ETA WITH PSILI AND VARIA
0x1F23, //GREEK SMALL LETTER ETA WITH DASIA AND VARIA
0x1F24, //GREEK SMALL LETTER ETA WITH PSILI AND OXIA
0x1F25, //GREEK SMALL LETTER ETA WITH DASIA AND OXIA
0x1F26, //GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI
0x1F27, //GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI
0x1F28, //GREEK CAPITAL LETTER ETA WITH PSILI
0x1F29, //GREEK CAPITAL LETTER ETA WITH DASIA
0x1F2A, //GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA
0x1F2B, //GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA
0x1F2C, //GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA
0x1F2D, //GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA
0x1F2E, //GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI
0x1F2F, //GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI
0x1F30, //GREEK SMALL LETTER IOTA WITH PSILI
0x1F31, //GREEK SMALL LETTER IOTA WITH DASIA
0x1F32, //GREEK SMALL LETTER IOTA WITH PSILI AND VARIA
0x1F33, //GREEK SMALL LETTER IOTA WITH DASIA AND VARIA
0x1F34, //GREEK SMALL LETTER IOTA WITH PSILI AND OXIA
0x1F35, //GREEK SMALL LETTER IOTA WITH DASIA AND OXIA
0x1F36, //GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI
0x1F37, //GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI
0x1F38, //GREEK CAPITAL LETTER IOTA WITH PSILI
0x1F39, //GREEK CAPITAL LETTER IOTA WITH DASIA
0x1F3A, //GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA
0x1F3B, //GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA
0x1F3C, //GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA
0x1F3D, //GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA
0x1F3E, //GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI
0x1F3F, //GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI
0x1F40, //GREEK SMALL LETTER OMICRON WITH PSILI
0x1F41, //GREEK SMALL LETTER OMICRON WITH DASIA
0x1F42, //GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA
0x1F43, //GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA
0x1F44, //GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA
0x1F45, //GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA
0x1F48, //GREEK CAPITAL LETTER OMICRON WITH PSILI
0x1F49, //GREEK CAPITAL LETTER OMICRON WITH DASIA
0x1F4A, //GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA
0x1F4B, //GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA
0x1F4C, //GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA
0x1F4D, //GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA
0x1F50, //GREEK SMALL LETTER UPSILON WITH PSILI
0x1F51, //GREEK SMALL LETTER UPSILON WITH DASIA
0x1F52, //GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA
0x1F53, //GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA
0x1F54, //GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA
0x1F55, //GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA
0x1F56, //GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI
0x1F57, //GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI
0x1F59, //GREEK CAPITAL LETTER UPSILON WITH DASIA
0x1F5B, //GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA
0x1F5D, //GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA
0x1F5F, //GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI
0x1F60, //GREEK SMALL LETTER OMEGA WITH PSILI
0x1F61, //GREEK SMALL LETTER OMEGA WITH DASIA
0x1F62, //GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA
0x1F63, //GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA
0x1F64, //GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA
0x1F65, //GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA
0x1F66, //GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI
0x1F67, //GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI
0x1F68, //GREEK CAPITAL LETTER OMEGA WITH PSILI
0x1F69, //GREEK CAPITAL LETTER OMEGA WITH DASIA
0x1F6A, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA
0x1F6B, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA
0x1F6C, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA
0x1F6D, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA
0x1F6E, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI
0x1F6F, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI
0x1F70, //GREEK SMALL LETTER ALPHA WITH VARIA
0x1F71, //GREEK SMALL LETTER ALPHA WITH OXIA
0x1F72, //GREEK SMALL LETTER EPSILON WITH VARIA
0x1F73, //GREEK SMALL LETTER EPSILON WITH OXIA
0x1F74, //GREEK SMALL LETTER ETA WITH VARIA
0x1F75, //GREEK SMALL LETTER ETA WITH OXIA
0x1F76, //GREEK SMALL LETTER IOTA WITH VARIA
0x1F77, //GREEK SMALL LETTER IOTA WITH OXIA
0x1F78, //GREEK SMALL LETTER OMICRON WITH VARIA
0x1F79, //GREEK SMALL LETTER OMICRON WITH OXIA
0x1F7A, //GREEK SMALL LETTER UPSILON WITH VARIA
0x1F7B, //GREEK SMALL LETTER UPSILON WITH OXIA
0x1F7C, //GREEK SMALL LETTER OMEGA WITH VARIA
0x1F7D, //GREEK SMALL LETTER OMEGA WITH OXIA
0x1F80, //GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI
0x1F81, //GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI
0x1F82, //GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI
0x1F83, //GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI
0x1F84, //GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI
0x1F85, //GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI
0x1F86, //GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
0x1F87, //GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
0x1F88, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI
0x1F89, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI
0x1F8A, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI
0x1F8B, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI
0x1F8C, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI
0x1F8D, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI
0x1F8E, //GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
0x1F8F, //GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
0x1F90, //GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI
0x1F91, //GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI
0x1F92, //GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI
0x1F93, //GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI
0x1F94, //GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI
0x1F95, //GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI
0x1F96, //GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
0x1F97, //GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
0x1F98, //GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI
0x1F99, //GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI
0x1F9A, //GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI
0x1F9B, //GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI
0x1F9C, //GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI
0x1F9D, //GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI
0x1F9E, //GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
0x1F9F, //GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
0x1FA0, //GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI
0x1FA1, //GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI
0x1FA2, //GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI
0x1FA3, //GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI
0x1FA4, //GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI
0x1FA5, //GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI
0x1FA6, //GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
0x1FA7, //GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
0x1FA8, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI
0x1FA9, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI
0x1FAA, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI
0x1FAB, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI
0x1FAC, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI
0x1FAD, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI
0x1FAE, //GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
0x1FAF, //GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
0x1FB0, //GREEK SMALL LETTER ALPHA WITH VRACHY
0x1FB1, //GREEK SMALL LETTER ALPHA WITH MACRON
0x1FB2, //GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI
0x1FB3, //GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI
0x1FB4, //GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI
0x1FB6, //GREEK SMALL LETTER ALPHA WITH PERISPOMENI
0x1FB7, //GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI
0x1FB8, //GREEK CAPITAL LETTER ALPHA WITH VRACHY
0x1FB9, //GREEK CAPITAL LETTER ALPHA WITH MACRON
0x1FBA, //GREEK CAPITAL LETTER ALPHA WITH VARIA
0x1FBB, //GREEK CAPITAL LETTER ALPHA WITH OXIA
0x1FBC, //GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI
0x1FC2, //GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI
0x1FC3, //GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI
0x1FC4, //GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI
0x1FC6, //GREEK SMALL LETTER ETA WITH PERISPOMENI
0x1FC7, //GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI
0x1FC8, //GREEK CAPITAL LETTER EPSILON WITH VARIA
0x1FC9, //GREEK CAPITAL LETTER EPSILON WITH OXIA
0x1FCA, //GREEK CAPITAL LETTER ETA WITH VARIA
0x1FCB, //GREEK CAPITAL LETTER ETA WITH OXIA
0x1FCC, //GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI
0x1FD0, //GREEK SMALL LETTER IOTA WITH VRACHY
0x1FD1, //GREEK SMALL LETTER IOTA WITH MACRON
0x1FD2, //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA
0x1FD3, //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA
0x1FD6, //GREEK SMALL LETTER IOTA WITH PERISPOMENI
0x1FD7, //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI
0x1FD8, //GREEK CAPITAL LETTER IOTA WITH VRACHY
0x1FD9, //GREEK CAPITAL LETTER IOTA WITH MACRON
0x1FDA, //GREEK CAPITAL LETTER IOTA WITH VARIA
0x1FDB, //GREEK CAPITAL LETTER IOTA WITH OXIA
0x1FE0, //GREEK SMALL LETTER UPSILON WITH VRACHY
0x1FE1, //GREEK SMALL LETTER UPSILON WITH MACRON
0x1FE2, //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA
0x1FE3, //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA
0x1FE4, //GREEK SMALL LETTER RHO WITH PSILI
0x1FE5, //GREEK SMALL LETTER RHO WITH DASIA
0x1FE6, //GREEK SMALL LETTER UPSILON WITH PERISPOMENI
0x1FE7, //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI
0x1FE8, //GREEK CAPITAL LETTER UPSILON WITH VRACHY
0x1FE9, //GREEK CAPITAL LETTER UPSILON WITH MACRON
0x1FEA, //GREEK CAPITAL LETTER UPSILON WITH VARIA
0x1FEB, //GREEK CAPITAL LETTER UPSILON WITH OXIA
0x1FEC, //GREEK CAPITAL LETTER RHO WITH DASIA
0x1FF2, //GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI
0x1FF3, //GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI
0x1FF4, //GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI
0x1FF6, //GREEK SMALL LETTER OMEGA WITH PERISPOMENI
0x1FF7, //GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI
0x1FF8, //GREEK CAPITAL LETTER OMICRON WITH VARIA
0x1FF9, //GREEK CAPITAL LETTER OMICRON WITH OXIA
0x1FFA, //GREEK CAPITAL LETTER OMEGA WITH VARIA
0x1FFB, //GREEK CAPITAL LETTER OMEGA WITH OXIA
0x1FFC, //GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI
0x2129 //TURNED GREEK SMALL LETTER IOTA
};
QChar all_lgl[]={
'a', //GREEK CAPITAL LETTER ALPHA WITH TONOS
'e', //GREEK CAPITAL LETTER EPSILON WITH TONOS
'h', //GREEK CAPITAL LETTER ETA WITH TONOS
'i', //GREEK CAPITAL LETTER IOTA WITH TONOS
'o', //GREEK CAPITAL LETTER OMICRON WITH TONOS
'u', //GREEK CAPITAL LETTER UPSILON WITH TONOS
'w', //GREEK CAPITAL LETTER OMEGA WITH TONOS
'i', //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
'a', //GREEK CAPITAL LETTER ALPHA
'b', //GREEK CAPITAL LETTER BETA
'g', //GREEK CAPITAL LETTER GAMMA
'd', //GREEK CAPITAL LETTER DELTA
'e', //GREEK CAPITAL LETTER EPSILON
'z', //GREEK CAPITAL LETTER ZETA
'h', //GREEK CAPITAL LETTER ETA
'q', //GREEK CAPITAL LETTER THETA
'i', //GREEK CAPITAL LETTER IOTA
'k', //GREEK CAPITAL LETTER KAPPA
'l', //GREEK CAPITAL LETTER LAMDA
'm', //GREEK CAPITAL LETTER MU
'n', //GREEK CAPITAL LETTER NU
'j', //GREEK CAPITAL LETTER XI
'o', //GREEK CAPITAL LETTER OMICRON
'p', //GREEK CAPITAL LETTER PI
'r', //GREEK CAPITAL LETTER RHO
's', //GREEK CAPITAL LETTER SIGMA
't', //GREEK CAPITAL LETTER TAU
'u', //GREEK CAPITAL LETTER UPSILON
'f', //GREEK CAPITAL LETTER PHI
'x', //GREEK CAPITAL LETTER CHI
'c', //GREEK CAPITAL LETTER PSI
'w', //GREEK CAPITAL LETTER OMEGA
'i', //GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
'u', //GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
'a', //GREEK SMALL LETTER ALPHA WITH TONOS
'e', //GREEK SMALL LETTER EPSILON WITH TONOS
'h', //GREEK SMALL LETTER ETA WITH TONOS
'i', //GREEK SMALL LETTER IOTA WITH TONOS
'u', //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
'a', //GREEK SMALL LETTER ALPHA
'b', //GREEK SMALL LETTER BETA
'g', //GREEK SMALL LETTER GAMMA
'd', //GREEK SMALL LETTER DELTA
'e', //GREEK SMALL LETTER EPSILON
'z', //GREEK SMALL LETTER ZETA
'h', //GREEK SMALL LETTER ETA
'q', //GREEK SMALL LETTER THETA
'i', //GREEK SMALL LETTER IOTA
'k', //GREEK SMALL LETTER KAPPA
'l', //GREEK SMALL LETTER LAMDA
'm', //GREEK SMALL LETTER MU
'n', //GREEK SMALL LETTER NU
'j', //GREEK SMALL LETTER XI
'o', //GREEK SMALL LETTER OMICRON
'p', //GREEK SMALL LETTER PI
'r', //GREEK SMALL LETTER RHO
's', //GREEK SMALL LETTER FINAL SIGMA
's', //GREEK SMALL LETTER SIGMA
't', //GREEK SMALL LETTER TAU
'u', //GREEK SMALL LETTER UPSILON
'f', //GREEK SMALL LETTER PHI
'x', //GREEK SMALL LETTER CHI
'c', //GREEK SMALL LETTER PSI
'w', //GREEK SMALL LETTER OMEGA
'i', //GREEK SMALL LETTER IOTA WITH DIALYTIKA
'u', //GREEK SMALL LETTER UPSILON WITH DIALYTIKA
'o', //GREEK SMALL LETTER OMICRON WITH TONOS
'u', //GREEK SMALL LETTER UPSILON WITH TONOS
'w', //GREEK SMALL LETTER OMEGA WITH TONOS
'a', //GREEK SMALL LETTER ALPHA WITH PSILI
'a', //GREEK SMALL LETTER ALPHA WITH DASIA
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI
'e', //GREEK SMALL LETTER EPSILON WITH PSILI
'e', //GREEK SMALL LETTER EPSILON WITH DASIA
'e', //GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA
'e', //GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA
'e', //GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA
'e', //GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA
'e', //GREEK CAPITAL LETTER EPSILON WITH PSILI
'e', //GREEK CAPITAL LETTER EPSILON WITH DASIA
'e', //GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA
'e', //GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA
'e', //GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA
'e', //GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA
'h', //GREEK SMALL LETTER ETA WITH PSILI
'h', //GREEK SMALL LETTER ETA WITH DASIA
'h', //GREEK SMALL LETTER ETA WITH PSILI AND VARIA
'h', //GREEK SMALL LETTER ETA WITH DASIA AND VARIA
'h', //GREEK SMALL LETTER ETA WITH PSILI AND OXIA
'h', //GREEK SMALL LETTER ETA WITH DASIA AND OXIA
'h', //GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI
'h', //GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI
'h', //GREEK CAPITAL LETTER ETA WITH PSILI
'h', //GREEK CAPITAL LETTER ETA WITH DASIA
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI
'i', //GREEK SMALL LETTER IOTA WITH PSILI
'i', //GREEK SMALL LETTER IOTA WITH DASIA
'i', //GREEK SMALL LETTER IOTA WITH PSILI AND VARIA
'i', //GREEK SMALL LETTER IOTA WITH DASIA AND VARIA
'i', //GREEK SMALL LETTER IOTA WITH PSILI AND OXIA
'i', //GREEK SMALL LETTER IOTA WITH DASIA AND OXIA
'i', //GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI
'i', //GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI
'i', //GREEK CAPITAL LETTER IOTA WITH PSILI
'i', //GREEK CAPITAL LETTER IOTA WITH DASIA
'i', //GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA
'i', //GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA
'i', //GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA
'i', //GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA
'i', //GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI
'i', //GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI
'o', //GREEK SMALL LETTER OMICRON WITH PSILI
'o', //GREEK SMALL LETTER OMICRON WITH DASIA
'o', //GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA
'o', //GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA
'o', //GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA
'o', //GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA
'o', //GREEK CAPITAL LETTER OMICRON WITH PSILI
'o', //GREEK CAPITAL LETTER OMICRON WITH DASIA
'o', //GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA
'o', //GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA
'o', //GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA
'o', //GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA
'u', //GREEK SMALL LETTER UPSILON WITH PSILI
'u', //GREEK SMALL LETTER UPSILON WITH DASIA
'u', //GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA
'u', //GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA
'u', //GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA
'u', //GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA
'u', //GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI
'u', //GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI
'u', //GREEK CAPITAL LETTER UPSILON WITH DASIA
'u', //GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA
'u', //GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA
'u', //GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI
'w', //GREEK SMALL LETTER OMEGA WITH PSILI
'w', //GREEK SMALL LETTER OMEGA WITH DASIA
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI
'a', //GREEK SMALL LETTER ALPHA WITH VARIA
'a', //GREEK SMALL LETTER ALPHA WITH OXIA
'e', //GREEK SMALL LETTER EPSILON WITH VARIA
'e', //GREEK SMALL LETTER EPSILON WITH OXIA
'h', //GREEK SMALL LETTER ETA WITH VARIA
'h', //GREEK SMALL LETTER ETA WITH OXIA
'i', //GREEK SMALL LETTER IOTA WITH VARIA
'i', //GREEK SMALL LETTER IOTA WITH OXIA
'o', //GREEK SMALL LETTER OMICRON WITH VARIA
'o', //GREEK SMALL LETTER OMICRON WITH OXIA
'u', //GREEK SMALL LETTER UPSILON WITH VARIA
'u', //GREEK SMALL LETTER UPSILON WITH OXIA
'w', //GREEK SMALL LETTER OMEGA WITH VARIA
'w', //GREEK SMALL LETTER OMEGA WITH OXIA
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
'h', //GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
'w', //GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH VRACHY
'a', //GREEK SMALL LETTER ALPHA WITH MACRON
'a', //GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI
'a', //GREEK SMALL LETTER ALPHA WITH PERISPOMENI
'a', //GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI
'a', //GREEK CAPITAL LETTER ALPHA WITH VRACHY
'a', //GREEK CAPITAL LETTER ALPHA WITH MACRON
'a', //GREEK CAPITAL LETTER ALPHA WITH VARIA
'a', //GREEK CAPITAL LETTER ALPHA WITH OXIA
'a', //GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI
'h', //GREEK SMALL LETTER ETA WITH PERISPOMENI
'h', //GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI
'e', //GREEK CAPITAL LETTER EPSILON WITH VARIA
'e', //GREEK CAPITAL LETTER EPSILON WITH OXIA
'h', //GREEK CAPITAL LETTER ETA WITH VARIA
'h', //GREEK CAPITAL LETTER ETA WITH OXIA
'h', //GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI
'i', //GREEK SMALL LETTER IOTA WITH VRACHY
'i', //GREEK SMALL LETTER IOTA WITH MACRON
'i', //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA
'i', //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA
'i', //GREEK SMALL LETTER IOTA WITH PERISPOMENI
'i', //GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI
'i', //GREEK CAPITAL LETTER IOTA WITH VRACHY
'i', //GREEK CAPITAL LETTER IOTA WITH MACRON
'i', //GREEK CAPITAL LETTER IOTA WITH VARIA
'i', //GREEK CAPITAL LETTER IOTA WITH OXIA
'u', //GREEK SMALL LETTER UPSILON WITH VRACHY
'u', //GREEK SMALL LETTER UPSILON WITH MACRON
'u', //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA
'u', //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA
'r', //GREEK SMALL LETTER RHO WITH PSILI
'r', //GREEK SMALL LETTER RHO WITH DASIA
'u', //GREEK SMALL LETTER UPSILON WITH PERISPOMENI
'u', //GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI
'u', //GREEK CAPITAL LETTER UPSILON WITH VRACHY
'u', //GREEK CAPITAL LETTER UPSILON WITH MACRON
'u', //GREEK CAPITAL LETTER UPSILON WITH VARIA
'u', //GREEK CAPITAL LETTER UPSILON WITH OXIA
'r', //GREEK CAPITAL LETTER RHO WITH DASIA
'w', //GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI
'w', //GREEK SMALL LETTER OMEGA WITH PERISPOMENI
'w', //GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI
'o', //GREEK CAPITAL LETTER OMICRON WITH VARIA
'o', //GREEK CAPITAL LETTER OMICRON WITH OXIA
'w', //GREEK CAPITAL LETTER OMEGA WITH VARIA
'w', //GREEK CAPITAL LETTER OMEGA WITH OXIA
'w', //GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI
'i' //TURNED GREEK SMALL LETTER IOTA
};
QChar all_LLl[]={
    0x41, //- A - a
    0x42, //- B - b
    0x43, //- C - c
    0x44, //- D - d
    0x45, //- E - e
    0x46, //- F - f
    0x47, //- G - g
    0x48, //- H - h
    0x49, //- I - i
    0x4a, //- J - j
    0x4b, //- K - k
    0x4c, //- L - l
    0x4d, //- M - m
    0x4e, //- N - n
    0x4f, //- O - o
    0x50, //- P - p
    0x51, //- Q - q
    0x52, //- R - r
    0x53, //- S - s
    0x54, //- T - t
    0x55, //- U - u
    0x56, //- V - v
    0x57, //- W - w
    0x58, //- X - x
    0x59, //- Y - y
    0x5a, //- Z - z
    0x61, //- a - a
    0x62, //- b - b
    0x63, //- c - c
    0x64, //- d - d
    0x65, //- e - e
    0x66, //- f - f
    0x67, //- g - g
    0x68, //- h - h
    0x69, //- i - i
    0x6a, //- j - j
    0x6b, //- k - k
    0x6c, //- l - l
    0x6d, //- m - m
    0x6e, //- n - n
    0x6f, //- o - o
    0x70, //- p - p
    0x71, //- q - q
    0x72, //- r - r
    0x73, //- s - s
    0x74, //- t - t
    0x75, //- u - u
    0x76, //- v - v
    0x77, //- w - w
    0x78, //- x - x
    0x79, //- y - y
    0x7a, //- z - z
    0xc0, //- À - a
    0xc1, //- Á - a
    0xc2, //- Â - a
    0xc3, //- Ã - a
    0xc4, //- Ä - a
    0xc5, //- Å - a
    0xc6, //- Æ - e
    0xc7, //- Ç - c
    0xc8, //- È - e
    0xc9, //- É - e
    0xca, //- Ê - e
    0xcb, //- Ë - e
    0xcc, //- Ì - i
    0xcd, //- Í - i
    0xce, //- Î - i
    0xcf, //- Ï - i
    0xd0, //- Ð - d
    0xd1, //- Ñ - n
    0xd2, //- Ò - o
    0xd3, //- Ó - o
    0xd4, //- Ô - o
    0xd5, //- Õ - o
    0xd6, //- Ö - o
    0xd8, //- Ø - o
    0xd9, //- Ù - u
    0xda, //- Ú - u
    0xdb, //- Û - u
    0xdc, //- Ü - u
    0xdd, //- Ý - y
    0xde, //- Þ - b
    0xdf, //- ß - s
    0xe0, //- à - a
    0xe1, //- á - a
    0xe2, //- â - a
    0xe3, //- ã - a
    0xe4, //- ä - a
    0xe5, //- å - a
    0xe6, //- æ - e
    0xe7, //- ç - c
    0xe8, //- è - e
    0xe9, //- é - e
    0xea, //- ê - e
    0xeb, //- ë - e
    0xec, //- ì - i
    0xed, //- í - i
    0xee, //- î - i
    0xef, //- ï - i
    0xf1, //- ñ - n
    0xf2, //- ò - o
    0xf3, //- ó - o
    0xf4, //- ô - o
    0xf5, //- õ - o
    0xf6, //- ö - o
    0xf8, //- ø - o
    0xf9, //- ù - u
    0xfa, //- ú - u
    0xfb, //- û - u
    0xfc, //- ü - u
    0xfd, //- ý - y
    0xfe, //- þ - b
    0xff, //- ÿ - v
    0x100, //- Ā - a
    0x101, //- ā - a
    0x102, //- Ă - a
    0x103, //- ă - a
    0x104, //- Ą - a
    0x105, //- ą - a
    0x106, //- Ć - c
    0x107, //- ć - c
    0x108, //- Ĉ - c
    0x109, //- ĉ - c
    0x10a, //- Ċ - c
    0x10b, //- ċ - c
    0x10c, //- Č - c
    0x10d, //- č - c
    0x10e, //- Ď - d
    0x10f, //- ď - d
    0x110, //- Đ - d
    0x111, //- đ - d
    0x112, //- Ē - e
    0x113, //- ē - e
    0x114, //- Ĕ - e
    0x115, //- ĕ - e
    0x116, //- Ė - e
    0x117, //- ė - e
    0x118, //- Ę - e
    0x119, //- ę - e
    0x11a, //- Ě - e
    0x11b, //- ě - e
    0x11c, //- Ĝ - g
    0x11d, //- ĝ - g
    0x11e, //- Ğ - g
    0x11f, //- ğ - g
    0x120, //- Ġ - g
    0x121, //- ġ - g
    0x122, //- Ģ - g
    0x123, //- ģ - g
    0x124, //- Ĥ - h
    0x125, //- ĥ - h
    0x126, //- Ħ - h
    0x127, //- ħ - h
    0x128, //- Ĩ - i
    0x129, //- ĩ - i
    0x12a, //- Ī - i
    0x12b, //- ī - i
    0x12c, //- Ĭ - i
    0x12d, //- ĭ - i
    0x12e, //- Į - i
    0x12f, //- į - i
    0x130, //- İ - i
    0x131, //- ı - i
    0x134, //- Ĵ - i
    0x135, //- ĵ - i
    0x136, //- Ķ - k
    0x137, //- ķ - k
    0x138, //- ĸ - k
    0x139, //- Ĺ - l
    0x13a, //- ĺ - i
    0x13b, //- Ļ - l
    0x13c, //- ļ - l
    0x13d, //- Ľ - l
    0x13e, //- ľ - l
    0x13f, //- Ŀ - l
    0x140, //- ŀ - l
    0x141, //- Ł - l
    0x142, //- ł - l
    0x143, //- Ń - n
    0x144, //- ń - n
    0x145, //- Ņ - n
    0x146, //- ņ - n
    0x147, //- Ň - n
    0x148, //- ň - n
    0x149, //- ŉ - n
    0x14a, //- Ŋ - n
    0x14b, //- ŋ - n
    0x14c, //- Ō - o
    0x14d, //- ō - o
    0x14e, //- Ŏ - o
    0x14f, //- ŏ - o
    0x150, //- Ő - o
    0x151, //- ő - o
    0x154, //- Ŕ - r
    0x155, //- ŕ - r
    0x156, //- Ŗ - r
    0x157, //- ŗ - r
    0x158, //- Ř - r
    0x159, //- ř - r
    0x15a, //- Ś - s
    0x15b, //- ś - s
    0x15c, //- Ŝ - s
    0x15d, //- ŝ - s
    0x15e, //- Ş - s
    0x15f, //- ş - s
    0x160, //- Š - s
    0x161, //- š - s
    0x162, //- Ţ - t
    0x163, //- ţ - t
    0x164, //- Ť - t
    0x165, //- ť - t
    0x166, //- Ŧ - t
    0x167, //- ŧ - t
    0x168, //- Ũ - u
    0x169, //- ũ - u
    0x16a, //- Ū - u
    0x16b, //- ū - u
    0x16c, //- Ŭ - u
    0x16d, //- ŭ - u
    0x16e, //- Ů - u
    0x16f, //- ů - u
    0x170, //- Ű - u
    0x171, //- ű - u
    0x172, //- Ų - u
    0x173, //- ų - u
    0x174, //- Ŵ - w
    0x175, //- ŵ - w
    0x176, //- Ŷ - y
    0x177, //- ŷ - y
    0x178, //- Ÿ - y
    0x179, //- Ź - z
    0x17a, //- ź - z
    0x17b, //- Ż - z
    0x17c, //- ż - z
    0x17d, //- Ž - z
    0x17e, //- ž - z
    0x17f, //- ſ - f
    0x192, //- ƒ - f
    0x1e6, //- Ǧ - g
    0x1e7, //- ǧ - g
    0x1f8, //- Ǹ - n
    0x1f9, //- ǹ - n
    0x1fa, //- Ǻ - a
    0x1fb, //- ǻ - a
    0x1fc, //- Ǽ - e
    0x1fd, //- ǽ - e
    0x1fe, //- Ǿ - o
    0x1ff, //- ǿ - o
    0x218, //- Ș - s
    0x219, //- ș - s
    0x21a, //- Ț - s
    0x21b, //- ț - t
    0x232, //- Ȳ - y
    0x233, //- ȳ - y
    0x1e0e, //- Ḏ - d
    0x1e0f, //- ḏ - d
    0x1e24, //- Ḥ - h
    0x1e25, //- ḥ - h
    0x1e2a, //- Ḫ - h
    0x1e2b, //- ḫ - h
    0x1e32, //- Ḳ - k
    0x1e33, //- ḳ - k
    0x1e6e, //- Ṯ - t
    0x1e6f, //- ṯ - t
    0x1e71, //- ṱ - t
    0x1e80, //- Ẁ - w
    0x1e81, //- ẁ - w
    0x1e82, //- Ẃ - w
    0x1e83, //- ẃ - w
    0x1e84, //- Ẅ - w
    0x1e85, //- ẅ - w
    0x1e96, //- ẖ - h
    0x1ef2, //- Ỳ - y
    0x1ef3 //- ỳ - y
};
QChar all_lLl[]={
    'a', //- A - a
    'b', //- B - b
    'c', //- C - c
    'd', //- D - d
    'e', //- E - e
    'f', //- F - f
    'g', //- G - g
    'h', //- H - h
    'i', //- I - i
    'j', //- J - j
    'k', //- K - k
    'l', //- L - l
    'm', //- M - m
    'n', //- N - n
    'o', //- O - o
    'p', //- P - p
    'q', //- Q - q
    'r', //- R - r
    's', //- S - s
    't', //- T - t
    'u', //- U - u
    'v', //- V - v
    'w', //- W - w
    'x', //- X - x
    'y', //- Y - y
    'z', //- Z - z
    'a', //- a - a
    'b', //- b - b
    'c', //- c - c
    'd', //- d - d
    'e', //- e - e
    'f', //- f - f
    'g', //- g - g
    'h', //- h - h
    'i', //- i - i
    'j', //- j - j
    'k', //- k - k
    'l', //- l - l
    'm', //- m - m
    'n', //- n - n
    'o', //- o - o
    'p', //- p - p
    'q', //- q - q
    'r', //- r - r
    's', //- s - s
    't', //- t - t
    'u', //- u - u
    'v', //- v - v
    'w', //- w - w
    'x', //- x - x
    'y', //- y - y
    'z', //- z - z
    'a', //- À - a
    'a', //- Á - a
    'a', //- Â - a
    'a', //- Ã - a
    'a', //- Ä - a
    'a', //- Å - a
    'e', //- Æ - e
    'c', //- Ç - c
    'e', //- È - e
    'e', //- É - e
    'e', //- Ê - e
    'e', //- Ë - e
    'i', //- Ì - i
    'i', //- Í - i
    'i', //- Î - i
    'i', //- Ï - i
    'd', //- Ð - d
    'n', //- Ñ - n
    'o', //- Ò - o
    'o', //- Ó - o
    'o', //- Ô - o
    'o', //- Õ - o
    'o', //- Ö - o
    'o', //- Ø - o
    'u', //- Ù - u
    'u', //- Ú - u
    'u', //- Û - u
    'u', //- Ü - u
    'y', //- Ý - y
    'b', //- Þ - b
    's', //- ß - s
    'a', //- à - a
    'a', //- á - a
    'a', //- â - a
    'a', //- ã - a
    'a', //- ä - a
    'a', //- å - a
    'e', //- æ - e
    'c', //- ç - c
    'e', //- è - e
    'e', //- é - e
    'e', //- ê - e
    'e', //- ë - e
    'i', //- ì - i
    'i', //- í - i
    'i', //- î - i
    'i', //- ï - i
    'n', //- ñ - n
    'o', //- ò - o
    'o', //- ó - o
    'o', //- ô - o
    'o', //- õ - o
    'o', //- ö - o
    'o', //- ø - o
    'u', //- ù - u
    'u', //- ú - u
    'u', //- û - u
    'u', //- ü - u
    'y', //- ý - y
    'b', //- þ - b
    'v', //- ÿ - v
    'a', //- Ā - a
    'a', //- ā - a
    'a', //- Ă - a
    'a', //- ă - a
    'a', //- Ą - a
    'a', //- ą - a
    'c', //- Ć - c
    'c', //- ć - c
    'c', //- Ĉ - c
    'c', //- ĉ - c
    'c', //- Ċ - c
    'c', //- ċ - c
    'c', //- Č - c
    'c', //- č - c
    'd', //- Ď - d
    'd', //- ď - d
    'd', //- Đ - d
    'd', //- đ - d
    'e', //- Ē - e
    'e', //- ē - e
    'e', //- Ĕ - e
    'e', //- ĕ - e
    'e', //- Ė - e
    'e', //- ė - e
    'e', //- Ę - e
    'e', //- ę - e
    'e', //- Ě - e
    'e', //- ě - e
    'g', //- Ĝ - g
    'g', //- ĝ - g
    'g', //- Ğ - g
    'g', //- ğ - g
    'g', //- Ġ - g
    'g', //- ġ - g
    'g', //- Ģ - g
    'g', //- ģ - g
    'h', //- Ĥ - h
    'h', //- ĥ - h
    'h', //- Ħ - h
    'h', //- ħ - h
    'i', //- Ĩ - i
    'i', //- ĩ - i
    'i', //- Ī - i
    'i', //- ī - i
    'i', //- Ĭ - i
    'i', //- ĭ - i
    'i', //- Į - i
    'i', //- į - i
    'i', //- İ - i
    'i', //- ı - i
    'i', //- Ĵ - i
    'i', //- ĵ - i
    'k', //- Ķ - k
    'k', //- ķ - k
    'k', //- ĸ - k
    'l', //- Ĺ - l
    'i', //- ĺ - i
    'l', //- Ļ - l
    'l', //- ļ - l
    'l', //- Ľ - l
    'l', //- ľ - l
    'l', //- Ŀ - l
    'l', //- ŀ - l
    'l', //- Ł - l
    'l', //- ł - l
    'n', //- Ń - n
    'n', //- ń - n
    'n', //- Ņ - n
    'n', //- ņ - n
    'n', //- Ň - n
    'n', //- ň - n
    'n', //- ŉ - n
    'n', //- Ŋ - n
    'n', //- ŋ - n
    'o', //- Ō - o
    'o', //- ō - o
    'o', //- Ŏ - o
    'o', //- ŏ - o
    'o', //- Ő - o
    'o', //- ő - o
    'r', //- Ŕ - r
    'r', //- ŕ - r
    'r', //- Ŗ - r
    'r', //- ŗ - r
    'r', //- Ř - r
    'r', //- ř - r
    's', //- Ś - s
    's', //- ś - s
    's', //- Ŝ - s
    's', //- ŝ - s
    's', //- Ş - s
    's', //- ş - s
    's', //- Š - s
    's', //- š - s
    't', //- Ţ - t
    't', //- ţ - t
    't', //- Ť - t
    't', //- ť - t
    't', //- Ŧ - t
    't', //- ŧ - t
    'u', //- Ũ - u
    'u', //- ũ - u
    'u', //- Ū - u
    'u', //- ū - u
    'u', //- Ŭ - u
    'u', //- ŭ - u
    'u', //- Ů - u
    'u', //- ů - u
    'u', //- Ű - u
    'u', //- ű - u
    'u', //- Ų - u
    'u', //- ų - u
    'w', //- Ŵ - w
    'w', //- ŵ - w
    'y', //- Ŷ - y
    'y', //- ŷ - y
    'y', //- Ÿ - y
    'z', //- Ź - z
    'z', //- ź - z
    'z', //- Ż - z
    'z', //- ż - z
    'z', //- Ž - z
    'z', //- ž - z
    'f', //- ſ - f
    'f', //- ƒ - f
    'g', //- Ǧ - g
    'g', //- ǧ - g
    'n', //- Ǹ - n
    'n', //- ǹ - n
    'a', //- Ǻ - a
    'a', //- ǻ - a
    'e', //- Ǽ - e
    'e', //- ǽ - e
    'o', //- Ǿ - o
    'o', //- ǿ - o
    's', //- Ș - s
    's', //- ș - s
    's', //- Ț - s
    't', //- ț - t
    'y', //- Ȳ - y
    'y', //- ȳ - y
    'd', //- Ḏ - d
    'd', //- ḏ - d
    'h', //- Ḥ - h
    'h', //- ḥ - h
    'h', //- Ḫ - h
    'h', //- ḫ - h
    'k', //- Ḳ - k
    'k', //- ḳ - k
    't', //- Ṯ - t
    't', //- ṯ - t
    't', //- ṱ - t
    'w', //- Ẁ - w
    'w', //- ẁ - w
    'w', //- Ẃ - w
    'w', //- ẃ - w
    'w', //- Ẅ - w
    'w', //- ẅ - w
    'h', //- ẖ - h
    'y', //- Ỳ - y
    'y' //- ỳ - y
};

char latin_ext[]={
    0x61,
    0x62,
    0x67,
    0x64,
    0x65,
    0x7a,
    0x68,
    0x71,
    0x69,
    0x6b,
    0x6c,
    0x6d,
    0x6e,
    0x6a,
    0x6f,
    0x70,
    0x72,
    0x73,
    0x73,
    0x74,
    0x75,
    0x66,
    0x78,
    0x63,
    0x77,
    0x41,
    0x42,
    0x47,
    0x44,
    0x45,
    0x5a,
    0x48,
    0x54,
    0x49,
    0x4b,
    0x4c,
    0x4d,
    0x4e,
    0x4a,
    0x4f,
    0x50,
    0x52,
    0x53,
    0x54,
    0x55,
    0x46,
    0x58,
    0x43,
    0x57,
    0x20,
    0x28,
    0x29,
    0x5b,
    0x3d,
    0x5d,
    0x2b,
    0x7c,
    0x3f,
    0x2e,
    0x2c,
    0x3a,
    0x3b,
    0x27,
    0x2d,
    0x5f,
    0x0
};

ushort greek_ext[]={
    0x3b1,
    0x3b2,
    0x3b3,
    0x3b4,
    0x3b5,
    0x3b6,
    0x3b7,
    0x3b8,
    0x3b9,
    0x3ba,
    0x3bb,
    0x3bc,
    0x3bd,
    0x3be,
    0x3bf,
    0x3c0,
    0x3c1,
    0x3c3,
    0x3c2,
    0x3c4,
    0x3c5,
    0x3c6,
    0x3c7,
    0x3c8,
    0x3c9,
    0x391,
    0x392,
    0x393,
    0x394,
    0x395,
    0x396,
    0x397,
    0x398,
    0x399,
    0x39a,
    0x39b,
    0x39c,
    0x39d,
    0x39e,
    0x39f,
    0x3a0,
    0x3a1,
    0x3a3,
    0x3a4,
    0x3a5,
    0x3a6,
    0x3a7,
    0x3a8,
    0x3a9,
    0x20,
    0x313,
    0x314,
    0x301,
    0x342,
    0x300,
    0x308,
    0x345,
    0x323,
    0x2e,
    0x2c,
    0xb7,
    0x3b,
    0x2019,
    0x2010,
    0x2014,
    0x0
};

struct beta beta_greek[]=
{
{"*A",0x0391},
{"A",0x03B1},
{"*B",0x0392},
{"B",0x03B2},
{"*C",0x039E},
{"C",0x03BE},
{"*D",0x0394},
{"D",0x03B4},
{"*E",0x0395},
{"E",0x03B5},
{"*F",0x03A6},
{"F",0x03C6},
{"*G",0x0393},
{"G",0x03B3},
{"*H",0x0397},
{"H",0x03B7},
{"*I",0x0399},
{"I",0x03B9},
{"*K",0x039A},
{"K",0x03BA},
{"*L",0x039B},
{"L",0x03BB},
{"*M",0x039C},
{"M",0x03BC},
{"*N",0x039D},
{"N",0x03BD},
{"*O",0x039F},
{"O",0x03BF},
{"*P",0x03A0},
{"P",0x03C0},
{"*Q",0x0398},
{"Q",0x03B8},
{"*R",0x03A1},
{"R",0x03C1},
{"*S",0x03A3},
{"S",0x03C3},
{"S1",0x03C3},
{"S2",0x03C2},
{"*S3",0x03F9},
{"S3",0x03F2},
{"*T",0x03A4},
{"T",0x03C4},
{"*U",0x03A5},
{"U",0x03C5},
{"*V",0x03DC},
{"V",0x03DD},
{"*W",0x03A9},
{"W",0x03C9},
{"*X",0x03A7},
{"X",0x03C7},
{"*Y",0x03A8},
{"Y",0x03C8},
{"*Z",0x0396},
{"Z",0x03B6},
{".",0x002E},
{",",0x002C},
{":",0x00B7},
{";",0x003B},
{"'",0x2019},
{"-",0x2010},
{"_",0x2014},
{")",0x0313},
{"(",0x0314},
{"/",0x0301},
{"=",0x0342},
{"\\",0x0300},
{"+",0x0308},
{"|",0x0345},
{"?",0x0323},
{"",0x0}
},

beta_coptic[]={
{"*A",0x2C80},
{"A",0x2C81},
{"*B",0x2C82},
{"B",0x2C83},
{"*C",0x2C9C},
{"C",0x2C9D},
{"*D",0x2C86},
{"D",0x2C87},
{"*E",0x2C88},
{"E",0x2C89},
{"*F",0x2CAA},
{"F",0x2CAB},
{"*f",0x03E4},
{"f",0x03E5},
{"*G",0x2C84},
{"G",0x2C85},
{"*g",0x03EC},
{"g",0x03ED},
{"*H",0x2C8E},
{"H",0x2C8F},
{"*h",0x03E8},
{"h",0x03E9},
{"*I",0x2C92},
{"I",0x2C93},
{"*j",0x03EA},
{"j",0x03EB},
{"*K",0x2C94},
{"K",0x2C95},
{"*L",0x2C96},
{"L",0x2C97},
{"*M",0x2C98},
{"M",0x2C99},
{"*N",0x2C9A},
{"N",0x2C9B},
{"*O",0x2C9E},
{"O",0x2C9F},
{"*P",0x2CA0},
{"P",0x2CA1},
{"*Q",0x2C90},
{"Q",0x2C91},
{"*R",0x2CA2},
{"R",0x2CA3},
{"*S",0x2CA4},
{"S",0x2CA5},
{"*s",0x03E2},
{"s",0x03E3},
{"*T",0x2CA6},
{"T",0x2CA7},
{"*t",0x03EE},
{"t",0x03EF},
{"*U",0x2CA8},
{"U",0x2CA9},
{"*V",0x2C8A},
{"V",0x2C8B},
{"*W",0x2CB0},
{"W",0x2CB1},
{"*X",0x2CAC},
{"X",0x2CAD},
{"*Y",0x2CAE},
{"Y",0x2CAF},
{"*Z",0x2C8C},
{"Z",0x2C8D},
{".",0x002E},
{",",0x002C},
{":",0x00B7},
{";",0x003B},
{"'",0x2019},
{"-",0x2010},
{"_",0x2014},
{")",0x0313},
{"(",0x0314},
{"/",0x2019},
{"=",0x0342},
{"\\",0x0305},
{"+",0x0308},
{"|",0x0345},
{"?",0x0323},
{"",0x0}
},
beta_latin[]={
{"",0x0}
},
beta_nonscript[]={
{"[12",0x2192},
{"]12",0x2190},
{"[1",0x0028},
{"]1",0x0029},
{"[2",0x2329},
{"]2",0x232A},
{"[3",0x007B},
{"]3",0x007D},
{"[4",0x27E6},
{"]4",0x27E7},
{"[",0x005B},
{"]",0x005D},

{"@1",' '},
{"@",'\t'},

{"%10",0x003A},
{"%11",0x2022},
{"%12",0x002A},
{"%13",0x2021},
{"%14",0x00A7},
{"%15",0x02C8},
{"%16",0x00A6},
{"%17",0x2016},
{"%18",0x0027},
{"%19",0x2013},
{"%1",0x003F},
{"%2",0x002A},
{"%3",0x002F},
{"%4",0x0021},
{"%5",0x007C},
{"%6",0x003D},
{"%7",0x002B},
{"%8",0x0025},
{"%9",0x0026},
{"%",0x2020},

{"<3",0x007B},
{">3",0x007D},
{"<",0x0305},

{"#27",' '},
{"#",0x0374},

{"{",' '},
{"}",' '},
{"{2",' '},
{"}2",' '},

{"",0x0}
};

beta * beta_p(CTranslit::Script script,beta ** beta_ns)
{
    *beta_ns=&beta_nonscript[0];
    switch(script)
    {
    case CTranslit::Copt :
        return &beta_coptic[0];
        break;
    case CTranslit::Greek :
        return &beta_greek[0];
        break;
    case CTranslit::Latin :
        return &beta_latin[0];
        break;
    default :
        return &beta_latin[0];
        break;
    }
}

cmbstruct quality[]={
        {"complete+cz",9},
	{"weak",0},
	{"word alone",4},
	{"word",3},
	{"word and derivations",2},
        {"full",1},
        {"advanced",5},
        {"complete",6},
        {"complete+",7},
        {"complete++",8}

};

QCWordClass CTranslit::CWClass;

QString get_quality(int n)
{
	for(int x=0;x<=COUNT_QUALITY;x++)
		if(quality[x].n==n)
			return quality[x].t;
	return 0;
}

QString CTranslit::getWordType(int n)
{
    for(int x=0;x<=CWClass.count();x++)
        if(CWClass.at(x).second==n)
            return CWClass.at(x).first;
    return 0;
}

cmbstruct & get_quality_item(int n)
{
	return quality[n];
}

QString const CTranslit::lat_heb=QString(
"abgdevzhtiklmnsypcqrjuKCPMN");
QString const CTranslit::hebr=QString::fromUtf8(
"אבגדהוזחטיכלמנסעפצקרשתךץףםן");

QString const CTranslit::lat=QString(
"abgdezhqiklmnjoprstufxcwSFHKQJGT=-+,.*%$ ");
QString const CTranslit::lat_wpg=QString(
"abgdezhqiklmnjoprstufxcw");
QString const CTranslit::beta_wp_coptic=QString("ABGDEZHQIKLMNCOPRSTUFXYWsfhjgt");
QString const CTranslit::beta_wp_greek=QString("ABGDEZHQIKLMNCOPRSTUFXYW");
QString const CTranslit::lat_wp=QString(
"abgdezhqiklmnjoprstufxcwSFHJGT");
QString const CTranslit::copt=QString::fromUtf8(
"ⲁⲃⲅⲇⲉⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱϣϥϩϧⳉϫϭϯ=–+,.*%$ ");
QString const CTranslit::copt_wp=QString::fromUtf8(
"ⲁⲃⲅⲇⲉⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱϣϥϩϧⳉϫϭϯ");
QString const CTranslit::gr=QString::fromUtf8(
"αβγδεζηθικλμνξοπρστυφχψωSFHKQJGT=-+,.*%$ ");

// translit

QString const CTranslit::tr_LLl=QString::fromRawData(all_LLl,sizeof(all_LLl) / sizeof(QChar));
QString const CTranslit::tr_lLl=QString::fromRawData(all_lLl,sizeof(all_lLl) / sizeof(QChar));
QString const CTranslit::tr_LlL=QString::fromUtf8(
"abcdefghijklmnopqrstuvwxyz");
QString const CTranslit::tr_llL=QString::fromUtf8(
"abcdefghijklmnopqrstuvwxyz");

QString const CTranslit::tr_hlh=QString::fromUtf8(
"אבגדהוזחטיכלמנסעפצקרשתךץףםן");
QString const CTranslit::tr_llh=QString::fromUtf8(
"abgdevzhtiklmnsypcqrjuKCPMN");
QString const CTranslit::tr_hlh_n=QString::fromUtf8(
"אבגדהוזחטיכלמנסעפצקרשתךץףםן׳");
QString const CTranslit::tr_llh_n=QString::fromUtf8(
"abgdevzhtiklmnsypcqrjuKCPMN'");

QString const CTranslit::tr_hhl=QString::fromUtf8(
"אבגדהוזחטיכלמנסעפצקרשתךץףםן");
QString const CTranslit::tr_lhl=QString::fromUtf8(
"abgdevzhtiklmnsypcqrjuKCPMN");
QString const CTranslit::tr_hhl_n=QString::fromUtf8(
"אבגדהוזחטיכלמנסעפצקרשתךץףםן׳");
QString const CTranslit::tr_lhl_n=QString::fromUtf8(
"abgdevzhtiklmnsypcqrjuKCPMN'");

QString const CTranslit::tr_clc=QString::fromUtf8(
"ⲁⲃⲝⲇⲉⲫϥⲅϭⲏϩⲓϫⲕⲗⲙⲛⲟⲡⲑⲣⲥϣⲧϯⲩⲱⲭⲯⲍϧⳉⲊⲋⳀⳁ");
QString const CTranslit::tr_llc=QString::fromUtf8(
"abjdefFgGhHiJklmnopqrsStTuwxczKQVVRR");
QString const CTranslit::tr_clc_n=QString::fromUtf8(
"ⲁⲃⲝⲇⲉⲫϥⲅⲏⲓⲕⲗⲙⲛⲟⲡⲑⲣⲥⲧⲩⲱⲭⲯⲍⲋⳁ")+QString(0x20db)+QString(0x033f)+QString(0x0305);
QString const CTranslit::tr_llc_n=QString::fromUtf8(
"abjdefFghiklmnopqrstuwxczVR+*-");
QString const CTranslit::tr_ccl=QString::fromUtf8(
"ⲀⲁⲂⲃⲜⲝⲆⲇⲈⲉⲪⲫϤϥⲄⲅϬϭⲎⲏϨϩⲒⲓϪϫⲔⲕⲖⲗⲘⲙⲚⲛⲞⲟⲠⲡⲐⲑⲢⲣⲤⲥϢϣⲦⲧϮϯⲨⲩⲰⲱⲬⲭⲮⲯⲌⲍϦϧⳈⳉⲊⲋⳀⳁ");
QString const CTranslit::tr_lcl=QString::fromUtf8(
"aabbjjddeeffFFggGGhhHHiiJJkkllmmnnooppqqrrssSSttTTuuwwxxcczzKKQQVVRR");
QString const CTranslit::tr_ccl_n=QString::fromUtf8(
"ⲀⲁⲂⲃⲜⲝⲆⲇⲈⲉⲪⲫϤϥⲄⲅⲎⲏⲒⲓⲔⲕⲖⲗⲘⲙⲚⲛⲞⲟⲠⲡⲐⲑⲢⲣⲤⲥⲦⲧⲨⲩⲊⲋⲰⲱⲬⲭⲮⲯⲌⲍⳀⳁ")+QString(0x20db)+QString(0x033f)+QString(0x0305);
QString const CTranslit::tr_lcl_n=QString::fromUtf8(
            "aabbjjddeeffFFgghhiikkllmmnnooppqqrrssttuuVVwwxxcczzRR+*-");

QString const CTranslit::tr_ccg=QString::fromUtf8(
"ⲀⲁⲂⲃⲜⲝⲆⲇⲈⲉⲪⲫⲄⲅⲎⲏⲒⲓⲔⲕⲖⲗⲘⲙⲚⲛⲞⲟⲠⲡⲐⲑⲢⲣⲤⲥⲦⲧⲨⲩⲰⲱⲬⲭⲮⲯⲌⲍ");
QString const CTranslit::tr_gcg=QString::fromUtf8(
"ααββξξδδεεφφγγηηιικκλλμμννοοππθθρρσσττυυωωχχψψζζ");
QString const CTranslit::tr_gcl=QString::fromUtf8(
"aabbjjddeeffgghhiikkllmmnnooppqqrrssttuuwwxxcczz");

QString const CTranslit::tr_glg=QString::fromUtf8(
"αβγδεζηθικλμνξοπρστυφχψω");
QString const CTranslit::tr_llg=QString::fromUtf8(
"abgdezhqiklmnjoprstufxcw");
QString const CTranslit::tr_glg_n=QString::fromUtf8(
            "αβγδεϛζηθικλμνξοπϟρστυφχψωϡΜM")+QString(0x0374)+QString(0x0375);
QString const CTranslit::tr_llg_n=QString::fromUtf8(
"abgdeSzhqiklmnjopKrstufxcwRMM--");
QString const CTranslit::tr_glg_cs=QString::fromUtf8(
        "αΑβΒγΓδΔεΕζΖηΗθΘιΙκΚλΛμΜνΝξΞοΟπΠρΡσΣτΤυΥφΦχΧψΨωΩ");
QString const CTranslit::tr_llg_cs=QString::fromUtf8(
"aAbBgGdDeEzZhHqQiIkKlLmMnNjJoOpPrRsStTuUfFxXcCwW");
QString const CTranslit::tr_ggl=QString::fromRawData(all_ggl,sizeof(all_ggl) / sizeof(QChar));
QString const CTranslit::tr_lgl=QString::fromRawData(all_lgl,sizeof(all_lgl) / sizeof(QChar));
QString const CTranslit::tr_ggl_n=QString::fromUtf8("αβγδεϛϝζηθικλμνξοπϟϙρστυφχψωϡΜM")+QString(0x0374)+QString(0x0375);
QString const CTranslit::tr_lgl_n=QString::fromUtf8("abgdeSSzhqiklmnjopKKrstufxcwRMM--");

void CTranslit::init()
{
    CWClass.clear();
    CWClass
            << QCWordClassItem("-",0)
            << QCWordClassItem(QObject::tr("noun"),3)
            << QCWordClassItem(QObject::tr("noun male"),1)
            << QCWordClassItem(QObject::tr("noun female"),4)
            << QCWordClassItem(QObject::tr("noun male/female"),22)
            << QCWordClassItem(QObject::tr("plural"),8)
            << QCWordClassItem(QObject::tr("pronoun"),5)
            << QCWordClassItem(QObject::tr("interrogative particle"),23)
            << QCWordClassItem(QObject::tr("interrogative pronoun"),14)
            << QCWordClassItem(QObject::tr("interrogative adverb"),15)
            << QCWordClassItem(QObject::tr("verb"),2)
            << QCWordClassItem(QObject::tr("verbal prefix"),21)
            << QCWordClassItem(QObject::tr("adjective"),6)
            << QCWordClassItem(QObject::tr("conjunction"),16)
            << QCWordClassItem(QObject::tr("adverb"),7)
            << QCWordClassItem(QObject::tr("preposition"),9)
            << QCWordClassItem(QObject::tr("numeral"),13)
            << QCWordClassItem(QObject::tr("numeral male"),10)
            << QCWordClassItem(QObject::tr("numeral female"),11)
            << QCWordClassItem(QObject::tr("numeral male/female"),24)
            << QCWordClassItem(QObject::tr("particle"),17)
            << QCWordClassItem(QObject::tr("interjection"),18)
            << QCWordClassItem(QObject::tr("personal pronoun"),20)
            << QCWordClassItem(QObject::tr("HEADER"),99);
}

QString CTranslit::tr(QString const & str,Tr from_to,bool strip,SpaceMode space_mode)
{
    QString s(str),ns;
    if(space_mode==RemoveAll)
        s.remove(' ');

    QString const * f, *t;
    switch(from_to)
    {
        case GreekNToGreekTr :
            f=&tr_ggl;
            t=&tr_lgl;
        break;
        case GreekTrToGreekN :
            f=&tr_llg;
            t=&tr_glg;
        break;
        case GreekNToGreekTr_num :
            f=&tr_ggl_n;
            t=&tr_lgl_n;
        break;
        case GreekTrToGreekN_num :
            f=&tr_llg_n;
            t=&tr_glg_n;
        break;
        case GreekTrToGreekNcs :
            f=&tr_llg_cs;
            t=&tr_glg_cs;
        break;
        case CopticNToCopticTr :
            f=&tr_ccl;
            t=&tr_lcl;
        break;
        case CopticTrToCopticN :
            f=&tr_llc;
            t=&tr_clc;
        break;
        case CopticNToCopticTr_num :
            f=&tr_ccl_n;
            t=&tr_lcl_n;
        break;
        case CopticTrToCopticN_num :
            f=&tr_llc_n;
            t=&tr_clc_n;
        break;
        case HebrewTrToHebrewN :
            f=&tr_llh;
            t=&tr_hlh;
        break;
        case HebrewNToHebrewTr :
            f=&tr_hhl;
            t=&tr_lhl;
        break;
        case HebrewTrToHebrewN_num :
            f=&tr_llh_n;
            t=&tr_hlh_n;
        break;
        case HebrewNToHebrewTr_num :
            f=&tr_hhl_n;
            t=&tr_lhl_n;
        break;
        case LatinTrToLatinN :
            f=&tr_llL;
            t=&tr_LlL;
        break;
        case LatinNToLatinTr :
            f=&tr_LLl;
            t=&tr_lLl;
        break;
        case CopticNToGreekN :
            f=&tr_ccg;
            t=&tr_gcg;
            //s.remove(QString::fromUtf8("ϩ"));
        break;
        case CopticNToGreekTr :
            f=&tr_ccg;
            t=&tr_gcl;
            //s.remove(QString::fromUtf8("ϩ"));
        break;
        case CopticDictC :
            return to(str,Copt,false);
        break;
        case CopticDictGr :
            return to(str,Greek,false);
        break;
    }

    if(from_to==LatinNToLatinTr)
    {
        s.replace(QChar(0x00e6),QString("ae"));
        s.replace(QChar(0x00c6),QString("ae"));
        s.replace(QChar(0x0153),QString("oe"));
        s.replace(QChar(0x0152),QString("oe"));
    }

    for(int x=0;x<s.length();x++)
    {
        QChar ch(s[x]);
        if(ch==' '&&space_mode!=RemoveAll)
        {
            ns.append(' ');
            continue;
        }

        /*if(from_to==CopticTrToCopticN_num&&ch=='+')
        {
            ns.append(QString(0x0305).repeated(3));
            continue;
        }
        else if(from_to==CopticNToCopticTr_num&&
                ch==QChar(0x0305))
        {
            if(s.mid(x,3)==QString(0x0305).repeated(3))
            {
                ns.append('+');
            }
            continue;
        }*/

        int i=f->indexOf(ch);
        if(i!=-1)
            ns.append((*t)[i]);
        else if(!strip)
            ns.append(ch);
    }

    if(from_to==GreekTrToGreekN||from_to==GreekTrToGreekNcs)
    {
        int i;
        while((i=ns.indexOf(QRegExp(QString(0x03C3)+"\\W")))!=-1)
            ns.replace(i,1,QString(0x03C2));
        //ns.replace(QRegExp(QString(0x03C3)+"\\W"),QString(0x03C2));
        ns.replace(QRegExp(QString(0x03C3)+"$"),QString(0x03C2));
    }

    switch(space_mode)
    {
    case RemoveAll :
        break;
    case RemoveNone :
        break;
    case Trim :
        ns=ns.trimmed();
        break;
    case TrimAndKeepOne :
        {
            while(ns.contains("  "))
                ns.replace("  "," ");
            ns=ns.trimmed();
            break;
        }
    }

    return ns;
}

// translit

QString CTranslit::NAtoLatin2(QString const & na, bool filter)
{
    QString ns;
    for(int x=0;x<na.length();x++)
    {
        int ic=copt_wp.indexOf(na[x]);
        if(ic!=-1)
            ns.append(lat_wp[ic]);
        else if(lat_wp.indexOf(na[x])!=-1)
            ns.append(na[x]);
        else if(!filter)
            ns.append(na[x]);
    }
    return ns;
}

QString CTranslit::NAtoLatin(QString const & na)
{
	QString ns;
	for(int x=0;x<na.length();x++)
	{
            int i=copt.indexOf(na[x]);
            if(i!=-1)
                    ns.append(lat[i]);
	}
	return ns;
}

QString CTranslit::to(QString latin,Script scr,
	bool ancient_only){
        QString const * s,* p_lat(&lat);
	QString ns;
        switch(scr)
        {
            case Copt :
            s=&copt;
            break;
            case Greek :
            s=&gr;
            break;
            case Hebrew :
            p_lat=&lat_heb;
            s=&hebr;
            break;
            case Latin :
            return latin.trimmed();
            break;
        }

	bool skip=false;
	for(int x=0;x<latin.length();x++)
	{
                if(latin[x]=='('||latin[x]==QChar(0x27E8))
		{
			skip=true;
                        ns.append(latin[x]);
			continue;
		}
                else if(latin[x]==')'||latin[x]==QChar(0x27E9))
		{
			skip=false;
                        ns.append(latin[x]);
			continue;
		}

		if(!skip)
		{
                        int i=p_lat->indexOf(latin[x]);
			if(i!=-1)
				ns.append((*s)[i]);
			else if(!ancient_only)
				ns.append(latin[x]);
		}
		else
			ns.append(latin[x]);

	}

	if(scr==Greek)
	{
		ns.append(" ");
		ns.replace(QString::fromUtf8("σ,"),QString::fromUtf8("ς,"));
		ns.replace(QString::fromUtf8("σ "),QString::fromUtf8("ς "));

		ns.chop(1);
	}
	return ns;
}
QString CTranslit::betaToUtf(QString const & string,Script script)
{
    QStringList sl(string.split(QRegExp("[&\\$]"),QString::KeepEmptyParts));
    QString s,ns;
    int c=0;
    foreach(s,sl)
    {
        s.remove(QRegExp("^[0-9]*`"));
        Script sc(c++%2==0?script:Latin);
        ns.append(betaToUtfSimple(s,sc));
    }
    return ns;
}

QString CTranslit::betaToUtfSimple(QString const & string,Script script)
{
    QString str(string);

    beta * b_p;
    switch(script)
    {
        case Copt :
        {
            int p1=str.indexOf('<'),p2;
            if(p1!=-1)
            {
                p2=str.indexOf('>',p1);
                if(p2!=-1&&(p2-p1)>1)
                {
                    QString s;
                    for(int x=p1+2;x<=p2-2;x++)
                    {
                        s.append(str[x]).append('>');
                    }
                    str.replace(p1+2,p2-p1-3,s);
                }
            }

            b_p=&beta_coptic[0];
        }
        break;
        case Greek :
        b_p=&beta_greek[0];
        break;
        case Latin :
        b_p=&beta_latin[0];
        break;
    }

    beta * b_pa[]={b_p,/*&beta_accents[0],*/&beta_nonscript[0],0};

    QString ns;
    QRegExp oc("\\w");//,oc2("\\w");

    int i=0;
    label:
    while(i<str.length())
    {
        switch(script)
        {
            case Greek :
            {
                if(str.mid(i,1)=="*")
                {
                    int ocp=str.indexOf(oc,i+1);
                    if(ocp>i+1)
                    {
                        str.insert(i+1,str.mid(ocp,1));
                        str.remove(ocp+1,1);
                    }
                }
                break;
            }
            /*case Copt :
            {
                if(str.mid(i,1)=="C")
                {
                    QChar ch=str[i+1];
                    str[i]=ch;
                    str[i+1]='C';
                    //str.remove(i+2,1);
                }
                break;
            }*/
        }
        beta ** b_pa_p=&b_pa[0];
        do
        for(int x=0;(*b_pa_p)[x].utf!=0;x++)
        {
            QString beta((*b_pa_p)[x].beta);
            int l=beta.length();
            QString s(str.mid(i,l));

            if(s==beta)
            {
                ns.append(QString((*b_pa_p)[x].utf));
                i+=l;
                goto label;
            }
        }while((*++b_pa_p)!=0);
        ns.append(str.mid(i++,1));
    }

    switch(script)
    {
        case Greek :
        {
            QRegExp r(QString(0x03C3)+"\\W");
            int sigma;
            while((sigma=ns.indexOf(r))!=-1)
                ns.replace(sigma,1,QString(0x03C2));
            ns.replace(QRegExp(QString(0x03C3)+"$"),QString(0x03C2));
            break;
        }
        case Copt :
        {
            for(int x=0;x<ns.length();x++)
                if(ns[x]==0x0305)
                {
                    ns[x]=ns[x+1];
                    ns[(x++)+1]=0x0305;
                }
            ns.replace('>',0x0305);
            break;
        }
    }

    return ns;
}
QString CTranslit::latinToGreekExt(QString const & str)
{
    QString ns;
    for(int x=0;x<str.length();x++)
        for(char * p=&latin_ext[0];*p!=0;p++)
        {
            if(QChar(*p)==str[x])
            {
                ns.append(greek_ext[p-&latin_ext[0]]);
                break;
            }
        }

    QRegExp r(QString(0x03c3)+"\\W");
    int i;
    while((i=ns.indexOf(r))!=-1)
        ns.replace(i,1,QString(0x03c2));
    return ns;
}
QString CTranslit::greekToLatinExt(QString const & str)
{
    QString ns;
    for(int x=0;x<str.length();x++)
        for(unsigned short * p=&greek_ext[0];*p!=0;p++)
        {
            if(QChar(*p)==str[x])
            {
                ns.append(latin_ext[p-&greek_ext[0]]);
                break;
            }
        }

    return ns;
}
QString CTranslit::latinToCopticExt(QString const & str)
{
    return to(str,Copt,false);
}
QString CTranslit::latinToXExt(QString const & str,Script script)
{
    switch(script)
    {
        case Copt :
        {
            return latinToCopticExt(str).trimmed();
            break;
        }
        case Greek :
        case Latin :
        case Hebrew :
        {
            return str.trimmed();
            break;
        }
    }
    return str;
}

/*QString CTranslit::copticForLsj(QString const & coptic)
{
    QString const c(QString::fromUtf8("ⲁⲃⲅⲇⲉⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲥⲧⲩⲫⲭⲯⲱ"));
    QString const g(QString::fromUtf8("αβγδεζηθικλμνξοπρσςτυφχψω"));

    QString str(coptic),ns;
    str.remove(QString::fromUtf8("ϩ"));

    for(int x=0;x<str.length();x++)
    {
        int y=c.indexOf(str[x]);
        if(y!=-1)
            ns.append(g[y]);
    }
    return ns;
}*/

/*QString CTranslit::perseusToUtf8(QString const & latin)
{
    QString l(latin);

    QString ns;
    for(int x=0;x<l.length();x++)
    {
        if(QRegExp("\\d").exactMatch(l.mid(x,1)))
        {
            ns.append(" "+l[x]);
            continue;
        }
        if(l[x]=='*')
        {
            QRegExp r("\\w");
            int p=l.indexOf(r,x+1);
            if(p!=-1)
            {
                l.replace(x,1,l[p].toUpper());
                l.remove(p,1);
            }
        }

        int p=lat.indexOf(l[x]);
        if(p!=-1)
            ns.append(gr[p]);
        else
        {
            bool b=false;
            //for(unsigned short * y=&lat_acc[0];*y!=0;y++)
            for(int y=0;y<=8;y++)
                if(l[x]==lat_acc[y])
                {
                    ns.append(gr_acc[y]);
                    b=true;
                    break;
                }
            if(!b)
                ns.append(latin[x]);
        }
    }
    QRegExp r(QString::fromUtf8("σ\\W"));
    ns.append(" ");
    int p;
    while((p=ns.indexOf(r))!=-1)
        ns.replace(p,1,QString::fromUtf8("ς"));
    ns.chop(1);
    return ns;
}*/
//
QString CTranslit::escaped(QString const & string)
{
    QString nv(string);

    nv.replace("\\","\\\\");
    nv.replace("\'","\\\'");
    nv.replace("\"","\\\"");
    nv.replace("\b","\\\b");
    nv.replace("\n","\\\n");
    nv.replace("\r","\\\r");
    nv.replace("\t","\\\t");

    return nv;
}

QString CTranslit::normSep(QString const & path)
{
    QString _path(path);
    _path.replace(QString("\\"),QString("/"));
    return _path;
}

QString CTranslit::betaToLatStripped(QString const & string,Script lang)
{
    QString const * pbeta,*plat;
    switch(lang)
    {
        case Copt :
        pbeta=&beta_wp_coptic;
        plat=&lat_wp;
        break;
        case Greek :
        pbeta=&beta_wp_greek;
        plat=&lat_wpg;
        break;
    }

    QString ns;
    for(int x=0;x<string.length();x++)
    {
        if(string[x]==QChar(' '))
            ns.append(' ');
        else
        {
            int i=pbeta->indexOf(string[x]);
            if(i!=-1)
                ns.append((*plat)[i]);
        }

    }

    return ns;
}
bool CTranslit::isCoptic(QString const & str)
{
    QChar ch;
    foreach(ch,str)
    {
        if(tr_ccl.indexOf(ch)!=-1)
            return true;
    }
    return false;
}
bool CTranslit::isGreek(QString const & str)
{
    QChar ch;
    foreach(ch,str)
    {
        if(tr_ggl.indexOf(ch)!=-1)
            return true;
    }
    return false;
}
bool CTranslit::isHebrew(QString const & str)
{
    QChar ch;
    foreach(ch,str)
    {
        if(tr_hhl.indexOf(ch)!=-1)
            return true;
    }
    return false;
}
CTranslit::Script CTranslit::identify(QString const & str)
{
    if(isCoptic(str))
        return Copt;
    else if(isGreek(str))
        return Greek;
    else if(isHebrew(str))
        return Hebrew;
    return Latin;
}

/*bool CTranslit::isTag(QString const & text,int position)
{
    if(position<0)
        return false;

    bool lb(true),rb(true);
    int lb1=text.lastIndexOf("<",position);
    int lb2=text.lastIndexOf(">",position);
    int rb1=text.indexOf("<",position);
    int rb2=text.indexOf(">",position);

    if(lb1==-1&&lb2==-1)
        lb=false;
    else if(lb1!=-1&&lb2==-1)
        lb=true;
    else if(lb1==-1&&lb2!=-1)
        lb=false;
    else if(lb1<lb2)
        lb=false;

    if(rb1==-1&&rb2==-1)
        rb=false;
    else if(rb1!=-1&&rb2==-1)
        rb=false;
    else if(rb1==-1&&rb2!=-1)
        rb=true;
    else if(rb1<rb2)
        rb=false;

    return lb||rb;
}

QString CTranslit::highlightHtmlText(QString const & str,QString const & in_text,QString const & fcolor,QString const & bcolor,bool regexp,bool words)
{
    if(in_text.isEmpty())
        return str;

    QString text(in_text);

    if(regexp)
    {
        QRegExp r(str);
        r.setMinimal(true);

        if(words)
        {
            QStringList splitted(text.split(" ",QString::KeepEmptyParts));
            text.clear();
            for(int x=0;x<splitted.count();x++)
            {
                QString bkps(splitted[x]);

                QString htxt;
                int p=-1;
                while((p=r.indexIn(bkps))!=-1)
                {
                    bool is_tag(CTranslit::isTag(bkps,p));
                    QString const ms(r.cap(0));
                    QString pss(bkps.left(p+r.matchedLength()));
                    bkps.remove(0,p+r.matchedLength());
                    if(!is_tag)
                        pss.replace(ms,QString("<span style=\"color: "+fcolor+"; background-color: "+bcolor+"\">"+ms+"</span>"));
                    htxt.append(pss);
                }
                htxt.append(bkps);
                text.append(htxt+" ");

            }
            return text.trimmed();
        }
        else
        {
            QString htxt;
            int p=-1;
            while((p=r.indexIn(text))!=-1)
            {
                bool is_tag(CTranslit::isTag(text,p));
                QString ms(r.cap(0));
                QString pss(text.left(p+r.matchedLength()));
                text.remove(0,p+r.matchedLength());
                if(!is_tag)
                    pss.replace(ms,QString("<span style=\"color: "+fcolor+"; background-color: "+bcolor+"\">"+ms+"</span>"));
                htxt.append(pss);
            }
            htxt.append(text);
            return htxt;
        }
        return text;
    }
    else
        return text.replace(str,QString("<span style=\"color: "+fcolor+"; background-color: "+bcolor+"\">"+str+"</span>"));
}*/

QString CTranslit::humRead(qint64 value)
{
    static char const * unit[9]={" B"," KiB"," MiB"," GiB"," TiB"," PiB"," EiB"," ZiB"," YiB"};

    int const s(1024);
    int c(0);
    qint64 v(value);
    unsigned int d;

    while(v>=s)
    {
        d=v%s; v/=s;
        if(++c>9)
            break;
    }
    double rv=(double)v;
    if(c>0)
        return QString::number(rv+((double)1.0/((double)s/d)),'f',2)+QString(unit[c]);
    else
        return QString::number(v)+QString(unit[c]);
}

QString CTranslit::highlightCopDictWord(QString const & word,QString const & pattern,QString const & fcolor,QString const & bcolor)
{
    if(pattern.isEmpty())
        return word;

    QRegExp r(pattern);
    r.setMinimal(true);

    QStringList lm(word.split(" (",QString::KeepEmptyParts)),lm2;
    for(int y=0;y<lm.count();y++)
    {
        QString sm(lm.at(y));
        QStringList l(sm.split(", ",QString::KeepEmptyParts));
        for(int x=0;x<l.count();x++)
        {
            QString s(l.at(x));
            int p=r.indexIn(s);
            if(p!=-1&&r.matchedLength()>0)
            {
                QString c(r.cap(0));
                s.replace(c,QString("<span style=\"color: "+fcolor+"; background-color: "+bcolor+"\"><b>"+c+"</b></span>"));
                l.replace(x,s);
            }
        }
        lm2.append(l.join(", "));
    }

    return lm2.join(" (");
}

// MTextLineItem

MTextLineItem::MTextLineItem(QString const & rawdata,bool display)
    : _rawdata(pushIndexItem(display,rawdata)),
      _text(),_note(),_verse(),_index_w(),
      _has_note(false),_has_index_w(false)
{
    QRegExp rnote("\\[note\\].*\\[endnote\\]"),
            rindex("\\[index\\].*\\[endindex\\]"),
            rtrans("\\[notranslit\\].*\\[endnotranslit\\]");
    rtrans.setMinimal(true);

    QString t(_rawdata);

    int pi=rindex.indexIn(t);
    if(pi!=-1)
    {
        _index_w=rindex.cap();
        _index_w.remove(QRegExp("^\\[index\\]"));
        _index_w.remove(QRegExp("\\[endindex\\]$"));
        _has_index_w=true;
    }

    t.remove(rindex);

    int p=rnote.indexIn(t);
    if(p!=-1)
    {
        _note=rnote.cap();
        _note.remove(QRegExp("^\\[note\\]"));
        _note.remove(QRegExp("\\[endnote\\]$"));
        _has_note=true;
        t.remove(rnote);
    }

    if(!display)
        t.remove(rtrans);
    else
    {
        t.remove(QRegExp("\\[notranslit\\]"));
        t.remove(QRegExp("\\[endnotranslit\\]"));
    }

    _text=t;
}

MTextLineItem::MTextLineItem(MTextLineItem const & other)
    : _rawdata(other._rawdata),
      _text(other._text),
      _note(other._note),
      _verse(other._verse),
      _index_w(other._index_w),
      _has_note(other._has_note),
      _has_index_w(other._has_index_w)
{
}

void MTextLineItem::operator=(MTextLineItem const & other)
{
    _text=other._text;
    _note=other._note;
    _verse=other._verse;
    _index_w=other._index_w;
    _has_note=other._has_note;
    _has_index_w=other._has_index_w;
}

QString MTextLineItem::pushIndexItem(bool display, QString const & text)
{
    QString t(text);

    QRegExp riitem("\\[indexitem\\].*\\[endindexitem\\]"),
            rditem("\\[displayitem\\].*\\[enddisplayitem\\]");
    riitem.setMinimal(true);
    rditem.setMinimal(true);

    if(display)
    {
        t.remove(riitem);
        t.remove(QRegExp("\\[displayitem\\]"));
        t.remove(QRegExp("\\[enddisplayitem\\]"));
    }
    else
    {
        t.remove(rditem);
        t.remove(QRegExp("\\[indexitem\\]"));
        t.remove(QRegExp("\\[endindexitem\\]"));
    }

    return t;
}

QString MTextLineItem::note(bool tag) const
{
    if(tag)
        return QString("[note]"+_note+"[endnote]");
    else
        return _note;
}

QString MTextLineItem::text() const
{
    return _text;
}

QString MTextLineItem::verse() const
{
    return _verse;
}

QString MTextLineItem::indexW() const
{
    return _index_w;
}

void MTextLineItem::setText(QString const & text)
{
    _text=text;
}

void MTextLineItem::setVerse(QString const & verse)
{
    _verse=verse;
}
